
<@= ModelVars @>
<@ if Summary @>
	static $summary_fields = array (
<@ each Summary @>
		'<@= :Name @>' => '<@= :Val @>',
<@ /each @>
	);


<@ /if @>
<@ if Searchable @>
	static $searchable_fields = array (
<@ each Searchable @>
		'<@= :Name @>' => '<@= :Val @>',
<@ /each @>
	);


<@ /if @>
<@ if IsFinal @>
<@ if Decorator @>
	public function updateGeneratedCMSFields(FieldList $fields) {
<@ else @>
	public function getGeneratedCMSFields() {
                $parentClassName = get_parent_class($this);
                $parentClass = new $parentClassName;
                $fields = ($parentClass->hasMethod('getGeneratedCMSFields'))
                    ? $parentClass->getGeneratedCMSFields()
                    : FieldList::create(TabSet::create("Root"));

<@ /if @>
<@ else @>
<@ if Decorator @>
	public function updateGeneratedCMSFields(FieldList $fields) {
<@ else @>
	public function getCMSFields() {
		$fields = FieldList::create(TabSet::create("Root"));
<@ /if @>
<@ /if @>
<@ if Fields @><@ each Fields @>
<@ if Tab @>
		$fields->addFieldToTab("<@= Tab @>", <@= Instantiation @>);
<@ else @>
		$fields->push(<@= Instantiation @>);
<@ /if @>
<@ /each @><@ /if @>
<@ if Components @><@ each Components @>
<@ if Instantiation @>
<@ if Tab @>
		$fields->addFieldToTab("<@= Tab @>", <@= Instantiation @>);
<@ else @>
		$fields->push(<@= Instantiation @>);
<@ /if @>
<@ /if @>
<@ /each @><@ /if @>
<@ if Fields @><@ each Fields @>
<@= Update @>
<@ /each @><@ /if @>
<@ if Components @><@ each Components @>
<@= Update @>
<@ /each @><@ /if @>
<@ if Hide @><@ each Hide @>
		$fields->removeByName("<@= :Val @>");
<@ /each @><@ /if @>

		return $fields;
	}


<@ if Decorator @>
<@ else @>
<@ if PermissionProvider @>
<@ each PermissionProvider @>
	/**
	 * @param Member $member
	 * @return boolean
	 */
	public function can<@= Title @>($member = null) {
		if (is_null($member)) {
			if (!Member::currentUserID()) {
				return false;
			}
		}
		return Permission::checkMember($member, '<@= Content @>');
	}
<@ /each @>
	/**
	 * @return array
	 */
	public function providePermissions() {
		return array(
		<@ each PermissionProvider @>
	'<@= Content @>' => array(
				'name' => _t('<@= Namespace @>.<@= Content @>', '<@= Title @> <@= Model @>'),
				'category' => _t('<@= Namespace @>.PERMISSIONS_<@= Model @>', '<@= Model @> Permissions'),
				'help' => _t('<@= Namespace @>.<@= Content @>_HELP', 'Users can <@= Title @> <@= Model @>'),
				'sort' => <@= :Name @>

			),
		<@ /each @>);
	}
<@ /if @>
<@ /if @>